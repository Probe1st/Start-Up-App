"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _export(target, all) {
  for (var name in all) {
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}

_export(exports, {
  normalize: function normalize() {
    return _normalize;
  },
  url: function url() {
    return _url;
  },
  number: function number() {
    return _number;
  },
  percentage: function percentage() {
    return _percentage;
  },
  length: function length() {
    return _length;
  },
  lineWidth: function lineWidth() {
    return _lineWidth;
  },
  shadow: function shadow() {
    return _shadow;
  },
  color: function color() {
    return _color2;
  },
  image: function image() {
    return _image;
  },
  gradient: function gradient() {
    return _gradient;
  },
  position: function position() {
    return _position;
  },
  familyName: function familyName() {
    return _familyName;
  },
  genericName: function genericName() {
    return _genericName;
  },
  absoluteSize: function absoluteSize() {
    return _absoluteSize;
  },
  relativeSize: function relativeSize() {
    return _relativeSize;
  }
});

var _color = require("./color");

var _parseBoxShadowValue = require("./parseBoxShadowValue");

var _splitAtTopLevelOnly = require("./splitAtTopLevelOnly");

var cssFunctions = ["min", "max", "clamp", "calc"]; // Ref: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types

function isCSSFunction(value) {
  return cssFunctions.some(function (fn) {
    return new RegExp("^".concat(fn, "\\(.*\\)")).test(value);
  });
}

var placeholder = "--tw-placeholder";
var placeholderRe = new RegExp(placeholder, "g");

function _normalize(value) {
  var isRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (value.startsWith("--")) {
    return "var(".concat(value, ")");
  } // Keep raw strings if it starts with `url(`


  if (value.includes("url(")) {
    return value.split(/(url\(.*?\))/g).filter(Boolean).map(function (part) {
      if (/^url\(.*?\)$/.test(part)) {
        return part;
      }

      return _normalize(part, false);
    }).join("");
  } // Convert `_` to ` `, except for escaped underscores `\_`


  value = value.replace(/([^\\])_+/g, function (fullMatch, characterBefore) {
    return characterBefore + " ".repeat(fullMatch.length - 1);
  }).replace(/^_/g, " ").replace(/\\_/g, "_"); // Remove leftover whitespace

  if (isRoot) {
    value = value.trim();
  } // Add spaces around operators inside math functions like calc() that do not follow an operator
  // or '('.


  value = value.replace(/(calc|min|max|clamp)\(.+\)/g, function (match) {
    var vars = [];
    return match.replace(/var\((--.+?)[,)]/g, function (match, g1) {
      vars.push(g1);
      return match.replace(g1, placeholder);
    }).replace(/(-?\d*\.?\d(?!\b-\d.+[,)](?![^+\-/*])\D)(?:%|[a-z]+)?|\))([+\-/*])/g, "$1 $2 ").replace(placeholderRe, function () {
      return vars.shift();
    });
  });
  return value;
}

function _url(value) {
  return value.startsWith("url(");
}

function _number(value) {
  return !isNaN(Number(value)) || isCSSFunction(value);
}

function _percentage(value) {
  return value.endsWith("%") && _number(value.slice(0, -1)) || isCSSFunction(value);
} // Please refer to MDN when updating this list:
// https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units
// https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries#container_query_length_units


var lengthUnits = ["cm", "mm", "Q", "in", "pc", "pt", "px", "em", "ex", "ch", "rem", "lh", "rlh", "vw", "vh", "vmin", "vmax", "vb", "vi", "svw", "svh", "lvw", "lvh", "dvw", "dvh", "cqw", "cqh", "cqi", "cqb", "cqmin", "cqmax"];
var lengthUnitsPattern = "(?:".concat(lengthUnits.join("|"), ")");

function _length(value) {
  return value === "0" || new RegExp("^[+-]?[0-9]*.?[0-9]+(?:[eE][+-]?[0-9]+)?".concat(lengthUnitsPattern, "$")).test(value) || isCSSFunction(value);
}

var lineWidths = new Set(["thin", "medium", "thick"]);

function _lineWidth(value) {
  return lineWidths.has(value);
}

function _shadow(value) {
  var parsedShadows = (0, _parseBoxShadowValue.parseBoxShadowValue)(_normalize(value));
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = parsedShadows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var parsedShadow = _step.value;

      if (!parsedShadow.valid) {
        return false;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return true;
}

function _color2(value) {
  var colors = 0;
  var result = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, "_").every(function (part) {
    part = _normalize(part);
    if (part.startsWith("var(")) return true;
    if ((0, _color.parseColor)(part, {
      loose: true
    }) !== null) return colors++, true;
    return false;
  });
  if (!result) return false;
  return colors > 0;
}

function _image(value) {
  var images = 0;
  var result = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, ",").every(function (part) {
    part = _normalize(part);
    if (part.startsWith("var(")) return true;

    if (_url(part) || _gradient(part) || ["element(", "image(", "cross-fade(", "image-set("].some(function (fn) {
      return part.startsWith(fn);
    })) {
      images++;
      return true;
    }

    return false;
  });
  if (!result) return false;
  return images > 0;
}

var gradientTypes = new Set(["linear-gradient", "radial-gradient", "repeating-linear-gradient", "repeating-radial-gradient", "conic-gradient"]);

function _gradient(value) {
  value = _normalize(value);
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = gradientTypes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var type = _step2.value;

      if (value.startsWith("".concat(type, "("))) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return false;
}

var validPositions = new Set(["center", "top", "right", "bottom", "left"]);

function _position(value) {
  var positions = 0;
  var result = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, "_").every(function (part) {
    part = _normalize(part);
    if (part.startsWith("var(")) return true;

    if (validPositions.has(part) || _length(part) || _percentage(part)) {
      positions++;
      return true;
    }

    return false;
  });
  if (!result) return false;
  return positions > 0;
}

function _familyName(value) {
  var fonts = 0;
  var result = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, ",").every(function (part) {
    part = _normalize(part);
    if (part.startsWith("var(")) return true; // If it contains spaces, then it should be quoted

    if (part.includes(" ")) {
      if (!/(['"])([^"']+)\1/g.test(part)) {
        return false;
      }
    } // If it starts with a number, it's invalid


    if (/^\d/g.test(part)) {
      return false;
    }

    fonts++;
    return true;
  });
  if (!result) return false;
  return fonts > 0;
}

var genericNames = new Set(["serif", "sans-serif", "monospace", "cursive", "fantasy", "system-ui", "ui-serif", "ui-sans-serif", "ui-monospace", "ui-rounded", "math", "emoji", "fangsong"]);

function _genericName(value) {
  return genericNames.has(value);
}

var absoluteSizes = new Set(["xx-small", "x-small", "small", "medium", "large", "x-large", "x-large", "xxx-large"]);

function _absoluteSize(value) {
  return absoluteSizes.has(value);
}

var relativeSizes = new Set(["larger", "smaller"]);

function _relativeSize(value) {
  return relativeSizes.has(value);
}