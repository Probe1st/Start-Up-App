"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;

var utils = require("../utils");

function generate(patterns, settings) {
  var positivePatterns = getPositivePatterns(patterns);
  var negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);
  var staticPatterns = positivePatterns.filter(function (pattern) {
    return utils.pattern.isStaticPattern(pattern, settings);
  });
  var dynamicPatterns = positivePatterns.filter(function (pattern) {
    return utils.pattern.isDynamicPattern(pattern, settings);
  });
  var staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns,
  /* dynamic */
  false);
  var dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns,
  /* dynamic */
  true);
  return staticTasks.concat(dynamicTasks);
}

exports.generate = generate;
/**
 * Returns tasks grouped by basic pattern directories.
 *
 * Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.
 * This is necessary because directory traversal starts at the base directory and goes deeper.
 */

function convertPatternsToTasks(positive, negative, dynamic) {
  var tasks = [];
  var patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);
  var patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);
  var outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
  var insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
  tasks.push.apply(tasks, _toConsumableArray(convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic)));
  /*
   * For the sake of reducing future accesses to the file system, we merge all tasks within the current directory
   * into a global task, if at least one pattern refers to the root (`.`). In this case, the global task covers the rest.
   */

  if ('.' in insideCurrentDirectoryGroup) {
    tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));
  } else {
    tasks.push.apply(tasks, _toConsumableArray(convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic)));
  }

  return tasks;
}

exports.convertPatternsToTasks = convertPatternsToTasks;

function getPositivePatterns(patterns) {
  return utils.pattern.getPositivePatterns(patterns);
}

exports.getPositivePatterns = getPositivePatterns;

function getNegativePatternsAsPositive(patterns, ignore) {
  var negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);
  var positive = negative.map(utils.pattern.convertToPositivePattern);
  return positive;
}

exports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;

function groupPatternsByBaseDirectory(patterns) {
  var group = {};
  return patterns.reduce(function (collection, pattern) {
    var base = utils.pattern.getBaseDirectory(pattern);

    if (base in collection) {
      collection[base].push(pattern);
    } else {
      collection[base] = [pattern];
    }

    return collection;
  }, group);
}

exports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;

function convertPatternGroupsToTasks(positive, negative, dynamic) {
  return Object.keys(positive).map(function (base) {
    return convertPatternGroupToTask(base, positive[base], negative, dynamic);
  });
}

exports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;

function convertPatternGroupToTask(base, positive, negative, dynamic) {
  return {
    dynamic: dynamic,
    positive: positive,
    negative: negative,
    base: base,
    patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))
  };
}

exports.convertPatternGroupToTask = convertPatternGroupToTask;