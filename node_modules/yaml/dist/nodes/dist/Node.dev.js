'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var ALIAS = Symbol["for"]('yaml.alias');
var DOC = Symbol["for"]('yaml.document');
var MAP = Symbol["for"]('yaml.map');
var PAIR = Symbol["for"]('yaml.pair');
var SCALAR = Symbol["for"]('yaml.scalar');
var SEQ = Symbol["for"]('yaml.seq');
var NODE_TYPE = Symbol["for"]('yaml.node.type');

var isAlias = function isAlias(node) {
  return !!node && _typeof(node) === 'object' && node[NODE_TYPE] === ALIAS;
};

var isDocument = function isDocument(node) {
  return !!node && _typeof(node) === 'object' && node[NODE_TYPE] === DOC;
};

var isMap = function isMap(node) {
  return !!node && _typeof(node) === 'object' && node[NODE_TYPE] === MAP;
};

var isPair = function isPair(node) {
  return !!node && _typeof(node) === 'object' && node[NODE_TYPE] === PAIR;
};

var isScalar = function isScalar(node) {
  return !!node && _typeof(node) === 'object' && node[NODE_TYPE] === SCALAR;
};

var isSeq = function isSeq(node) {
  return !!node && _typeof(node) === 'object' && node[NODE_TYPE] === SEQ;
};

function isCollection(node) {
  if (node && _typeof(node) === 'object') switch (node[NODE_TYPE]) {
    case MAP:
    case SEQ:
      return true;
  }
  return false;
}

function isNode(node) {
  if (node && _typeof(node) === 'object') switch (node[NODE_TYPE]) {
    case ALIAS:
    case MAP:
    case SCALAR:
    case SEQ:
      return true;
  }
  return false;
}

var hasAnchor = function hasAnchor(node) {
  return (isScalar(node) || isCollection(node)) && !!node.anchor;
};

var NodeBase =
/*#__PURE__*/
function () {
  function NodeBase(type) {
    _classCallCheck(this, NodeBase);

    Object.defineProperty(this, NODE_TYPE, {
      value: type
    });
  }
  /** Create a copy of this node.  */


  _createClass(NodeBase, [{
    key: "clone",
    value: function clone() {
      var copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
      if (this.range) copy.range = this.range.slice();
      return copy;
    }
  }]);

  return NodeBase;
}();

exports.ALIAS = ALIAS;
exports.DOC = DOC;
exports.MAP = MAP;
exports.NODE_TYPE = NODE_TYPE;
exports.NodeBase = NodeBase;
exports.PAIR = PAIR;
exports.SCALAR = SCALAR;
exports.SEQ = SEQ;
exports.hasAnchor = hasAnchor;
exports.isAlias = isAlias;
exports.isCollection = isCollection;
exports.isDocument = isDocument;
exports.isMap = isMap;
exports.isNode = isNode;
exports.isPair = isPair;
exports.isScalar = isScalar;
exports.isSeq = isSeq;